(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,'* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  width: auto;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  width: 85%;\r\n  margin: 0 auto;\r\n  background-color: #fafaf5;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\r\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\r\n  font-size: 81.25%;\r\n  line-height: 1.5;\r\n  color: #000000;\r\n}\r\n\r\na {\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\nul {\r\n  list-style: none;\r\n}\r\n\r\ndiv#root {\r\n  background-color: #f6f6ef;\r\n  margin: 1rem 0;\r\n}\r\n\r\ndiv#root span {\r\n  font-size: 125%;\r\n}\r\n\r\n.posts {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.posts .post:not(:last-child) {\r\n  border-bottom: 1px solid #ddddd7;\r\n}\r\n\r\n.post {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.post .post_title {\r\n  line-height: 1;\r\n}\r\n\r\n.post .post_info {\r\n  width: 100%;\r\n}\r\n\r\n.post .post_info > * {\r\n  width: max-content;\r\n  line-height: 1;\r\n  color: #333333;\r\n  font-size: 100% !important;\r\n}\r\n\r\n.post .post_info > *:not(:last-child) {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.post .post_info .post_points {\r\n  color: #ff6600;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;;EAEE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,UAAU;EACV,cAAc;EACd,yBAAyB;EACzB;gEAC8D;EAC9D,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd,0BAA0B;AAC5B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,cAAc;AAChB",sourcesContent:['* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  width: auto;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  width: 85%;\r\n  margin: 0 auto;\r\n  background-color: #fafaf5;\r\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,\r\n    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\r\n  font-size: 81.25%;\r\n  line-height: 1.5;\r\n  color: #000000;\r\n}\r\n\r\na {\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\nul {\r\n  list-style: none;\r\n}\r\n\r\ndiv#root {\r\n  background-color: #f6f6ef;\r\n  margin: 1rem 0;\r\n}\r\n\r\ndiv#root span {\r\n  font-size: 125%;\r\n}\r\n\r\n.posts {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.posts .post:not(:last-child) {\r\n  border-bottom: 1px solid #ddddd7;\r\n}\r\n\r\n.post {\r\n  padding: 0.75rem;\r\n}\r\n\r\n.post .post_title {\r\n  line-height: 1;\r\n}\r\n\r\n.post .post_info {\r\n  width: 100%;\r\n}\r\n\r\n.post .post_info > * {\r\n  width: max-content;\r\n  line-height: 1;\r\n  color: #333333;\r\n  font-size: 100% !important;\r\n}\r\n\r\n.post .post_info > *:not(:last-child) {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.post .post_info .post_points {\r\n  color: #ff6600;\r\n}\r\n'],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),t.push(c))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,o=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var e=[],r=!0,o=!1,i=void 0;try{for(var a,s=n[Symbol.iterator]();!(r=(a=s.next()).done)&&(e.push(a.value),!t||e.length!==t);r=!0);}catch(n){o=!0,i=n}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return e}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),d=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(d).concat([l]).join("\n")}return[i].join("\n")}},300:(n,t)=>{var e=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();n.exports=t=e.fetch,e.fetch&&(t.default=e.fetch.bind(e)),t.Headers=e.Headers,t.Request=e.Request,t.Response=e.Response},379:(n,t,e)=>{var r,o=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),i=[];function a(n){for(var t=-1,e=0;e<i.length;e++)if(i[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},r=[],o=0;o<n.length;o++){var s=n[o],c=t.base?s[0]+t.base:s[0],l=e[c]||0,d="".concat(c," ").concat(l);e[c]=l+1;var A=a(d),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(i[A].references++,i[A].updater(u)):i.push({identifier:d,updater:h(u,t),references:1}),r.push(d)}return r}function c(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=e.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,d=(l=[],function(n,t){return l[n]=t,l.filter(Boolean).join("\n")});function A(n,t,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(i,a[t]):n.appendChild(i)}}function u(n,t,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,p=0;function h(n,t){var e,r,o;if(t.singleton){var i=p++;e=f||(f=c(t)),r=A.bind(null,e,i,!1),o=A.bind(null,e,i,!0)}else e=c(t),r=u.bind(null,e,t),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var o=a(e[r]);i[o].references--}for(var c=s(n,t),l=0;l<e.length;l++){var d=a(e[l]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}e=c}}}}},t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return n[r](o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(426);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var o=e(300),i=e.n(o);const a=n=>{return t=void 0,e=void 0,o=function*(){return yield i()(n).then((n=>n.json())).then((n=>n))},new((r=void 0)||(r=Promise))((function(n,i){function a(n){try{c(o.next(n))}catch(n){i(n)}}function s(n){try{c(o.throw(n))}catch(n){i(n)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(n){n(e)}))).then(a,s)}c((o=o.apply(t,e||[])).next())}));var t,e,r,o};const s=document.getElementById("topstories");var c,l,d,A;c=void 0,l=void 0,A=function*(){a("https://hacker-news.firebaseio.com/v0/topstories.json").then((n=>{for(let e=0;e<n.length;e++)e<50&&(t=n[e],a(`https://hacker-news.firebaseio.com/v0/item/${t}.json`).then((n=>{const t=document.createElement("div");t.classList.add("post");const e=document.createElement("span");e.classList.add("post_title"),e.setAttribute("title",n.title);const r=document.createElement("a");r.href=n.url,r.innerHTML=`${n.title} <span style="font-size: 65%">(${(n=>{const t=new RegExp(/^[a-z][a-z0-9+\-.]*:\/\/([a-z0-9\-._~%!$&'()*+,;=]+@)?([a-z0-9\-._~%]+|↵\[[a-z0-9\-._~%!$&'()*+,;=:]+\])/g);return n.match(t)})(n.url)})</span>`,e.append(r),t.append(e);const o=document.createElement("div");o.classList.add("post_info"),t.append(o);const i=document.createElement("span");i.classList.add("post_points"),i.setAttribute("title",`${n.score} points`),i.innerText=`↑ ${n.score}`,o.append(i);const a=document.createElement("span");if(a.classList.add("post_author"),a.setAttribute("title",`by ${n.by}`),a.innerText=`by ${n.by}`,o.append(a),n.descendants>0){const t=document.createElement("span");t.classList.add("post_comments"),t.setAttribute("title",`${n.descendants} comments`),t.innerHTML=`<a href="https://news.ycombinator.com/item?id=${n.id}">${n.descendants} comments</a>`,o.append(t)}s.append(t)})));var t}))},new((d=void 0)||(d=Promise))((function(n,t){function e(n){try{o(A.next(n))}catch(n){t(n)}}function r(n){try{o(A.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof d?o:new d((function(n){n(o)}))).then(e,r)}o((A=A.apply(c,l||[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,